#!/usr/bin/python3
import os
import struct


class Vulnerability:

    __Rsa = __import__("lib.rsa_crypt").rsa_crypt.Rsa()
    __vul_path = "./vulnerability"
    __index_path = __vul_path + "/index"
    __index_dict = []
    __index_len = {"vulId": 20,
                   "type": 4,
                   "start": 4,
                   "len": 4,
                   "secretType": 4,
                   "secretKey": 200,
                   }
    __pack_fmt = "20siiii200s"
    __index_step = sum([v for v in __index_len.values()])

    @staticmethod
    def insert(vul_id, style, secret_type, secret_key, content):
        data_path = Vulnerability.__vul_path + "/data_%d" % style
        with open(data_path, "ab") as fd:
            start = fd.tell()
            fd.write(Vulnerability.__Rsa.enc_bytes(content.encode()))
            length = fd.tell() - start

        index_bytes = struct.pack(Vulnerability.__pack_fmt, vul_id.encode(), style, start, length,
                                  secret_type, secret_key.encode())

        with open(Vulnerability.__index_path, "ab") as fi:
            fi.write(Vulnerability.__Rsa.enc_bytes(index_bytes))

    @staticmethod
    def refresh_index_dict():
        Vulnerability.__index_dict = []
        if os.path.exists(Vulnerability.__index_path):
            with open(Vulnerability.__index_path, "rb") as f:
                by = f.read()
                tmp = Vulnerability.__Rsa.dec_bytes(by)

                size = len(tmp)
                if size > 0:
                    for num in range(0, size, Vulnerability.__index_step):
                        st_bytes = tmp[num:(num + Vulnerability.__index_step)]
                        vul_id, style, start, length, sec_type, sec_key = struct.unpack(Vulnerability.__pack_fmt,
                                                                               st_bytes)
                        Vulnerability.__index_dict.append({
                            "vul_id": vul_id.decode().strip(b"\x00".decode()),
                            "type": style,
                            "start": start,
                            "length": length,
                            "seceretType": sec_type,
                            "seceretKey": sec_key.decode().strip(b"\x00".decode())
                        })

    @staticmethod
    def get_index(vul_id=None, style=None):
        Vulnerability.refresh_index_dict()
        res = []
        for index in Vulnerability.__index_dict:
            if vul_id:
                if index["vul_id"] != vul_id:
                    continue
            if style:
                if index["type"] != style:
                    continue
            res.append({"vul_id": index["vul_id"], "type": index["type"]})
        return res

    @staticmethod
    def get_id(style=None):
        Vulnerability.refresh_index_dict()
        return list(set(index["vul_id"] for index in Vulnerability.__index_dict if not style or index["type"] == style))

    @staticmethod
    def get_type(vul_id=None):
        Vulnerability.refresh_index_dict()
        return list(set(index["type"] for index in Vulnerability.__index_dict if not vul_id or index["vul_id"] == vul_id))

    @staticmethod
    def get_all_index():
        Vulnerability.refresh_index_dict()
        return Vulnerability.__index_dict

    @staticmethod
    def get_content(vul_id=None, style=None):
        Vulnerability.refresh_index_dict()
        res = []
        for index in Vulnerability.__index_dict:
            if (not vul_id or index["vul_id"] == vul_id) and (not style or index["type"] == style):
                start = index['start']
                length = index['length']

                data_path = Vulnerability.__vul_path + "/data_%d" % index["type"]
                with open(data_path, "rb") as f:
                    f.seek(start, 0)
                    tmp = bytes.decode(Vulnerability.__Rsa.dec_bytes(f.read(length)))
                    if len(tmp) > 0:
                        res.append(tmp)

        return res


if __name__ == "__main__":
    pass
